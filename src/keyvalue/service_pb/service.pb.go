// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package kvservice is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	GetRequest
	SetRequest
	Response
*/
package kvservice

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "github.com/chai2010/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type GetRequest struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}

func (m *GetRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type SetRequest struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}

func (m *SetRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SetRequest) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Response struct {
	Result           *int32  `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *Response) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
}

type KVService interface {
	Set(in *GetRequest, out *Response) error
	Get(in *SetRequest, out *Response) error
}

// AcceptKVServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptKVServiceClient(lis net.Listener, x KVService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("KVService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterKVService publish the given KVService implementation on the server.
func RegisterKVService(srv *rpc.Server, x KVService) error {
	if err := srv.RegisterName("KVService", x); err != nil {
		return err
	}
	return nil
}

// NewKVServiceServer returns a new KVService Server.
func NewKVServiceServer(x KVService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("KVService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeKVService listen announces on the local network address laddr
// and serves the given KVService implementation.
func ListenAndServeKVService(network, addr string, x KVService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("KVService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type KVServiceClient struct {
	*rpc.Client
}

// NewKVServiceClient returns a KVService rpc.Client and stub to handle
// requests to the set of KVService at the other end of the connection.
func NewKVServiceClient(conn io.ReadWriteCloser) (*KVServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &KVServiceClient{c}, c
}

func (c *KVServiceClient) Set(in *GetRequest, out *Response) error {
	return c.Call("KVService.Set", in, out)
}
func (c *KVServiceClient) Get(in *SetRequest, out *Response) error {
	return c.Call("KVService.Get", in, out)
}

// DialKVService connects to an KVService at the specified network address.
func DialKVService(network, addr string) (*KVServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &KVServiceClient{c}, c, nil
}

// DialKVServiceTimeout connects to an KVService at the specified network address.
func DialKVServiceTimeout(network, addr string,
	timeout time.Duration) (*KVServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &KVServiceClient{c}, c, nil
}
